@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q1: SQL Queries

-- i. Retrieve the address of customer Fname as 'xyz' and Lname as 'pqr'
SELECT a.*
FROM address_details a
JOIN Customer c ON a.code_no = c.cust_no
WHERE c.fname = 'xyz' AND c.lname = 'pqr';

-- ii. List the customer holding fixed deposit of amount more than 5000
SELECT c.*
FROM Customer c
JOIN Cust_Acc_FD_Details ca ON c.cust_no = ca.custno
JOIN fd_details fd ON ca.acc_fd_no = fd.acc_fd_no
WHERE fd.amt > 5000;

-- iii. List the employee details along with contact details using left outer join & right join.
SELECT e.*, cd.*
FROM Employee e
LEFT JOIN Contact_details cd ON e.code_no = cd.code_no;

SELECT e.*, cd.*
FROM Employee e
RIGHT JOIN Contact_details cd ON e.code_no = cd.code_no;

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Q2: SQL Queries
-- i. Create View on borrower table by selecting any two columns and perform insert update delete operations
CREATE VIEW BorrowerView AS
SELECT cust_name, loan_no FROM Borrower;

-- ii. Create view on borrower and depositor table by selecting any one column from each table
CREATE VIEW BorrowerDepositorView AS
SELECT b.cust_name, d.acc_no
FROM Borrower b
JOIN Depositor d ON b.cust_name = d.cust_name;

-- iii. List the customer who do not have bank branches in akurdi.
SELECT c.*
FROM customer c
LEFT JOIN branch b ON c.cust_city = b.branch_city
WHERE b.branch_city IS NULL OR b.branch_name != 'Akurdi';

-- iv. Display the customers those who have loan accounts.
SELECT c.*
FROM customer c
JOIN Borrower b ON c.cust_name = b.cust_name;

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Q3: SQL Queries
-- i. Find the names of all branches in loan relation.
SELECT DISTINCT branch_name
FROM Loan;

-- ii. Find all loan numbers for loans made at Akurdi Branch with loan amount > 12000.
SELECT loan_no
FROM Loan
WHERE branch_name = 'Akurdi' AND amount > 12000;

-- iii. Find all customers who have a loan from the bank. Find their names, loan_no, and loan amount.
SELECT c.cust_name, b.loan_no, l.amount
FROM customer c
JOIN Borrower b ON c.cust_name = b.cust_name
JOIN Loan l ON b.loan_no = l.loan_no;

-- iv. List all customers in alphabetical order who have a loan from the Akurdi branch.
SELECT c.*
FROM customer c
JOIN Borrower b ON c.cust_name = b.cust_name
JOIN Loan l ON b.loan_no = l.loan_no
WHERE l.branch_name = 'Akurdi'
ORDER BY c.cust_name;

-- v. Find all customers who have an account or loan or both at the bank.
SELECT c.*
FROM customer c
LEFT JOIN Depositor d ON c.cust_name = d.cust_name
LEFT JOIN Borrower b ON c.cust_name = b.cust_name
WHERE d.cust_name IS NOT NULL OR b.cust_name IS NOT NULL;


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 

Q4: SQL Queries
-- Creating Tables with Constraints
CREATE TABLE Account (
    Acc_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    balance DECIMAL(10, 2),
    FOREIGN KEY (branch_name) REFERENCES branch(branch_name)
);

CREATE TABLE branch (
    branch_name VARCHAR(50) PRIMARY KEY,
    branch_city VARCHAR(50),
    assets DECIMAL(15, 2)
);

CREATE TABLE customer (
    cust_name VARCHAR(50) PRIMARY KEY,
    cust_street VARCHAR(255),
    cust_city VARCHAR(50)
);

CREATE TABLE Depositor (
    cust_name VARCHAR(50),
    acc_no INT,
    PRIMARY KEY (cust_name, acc_no),
    FOREIGN KEY (cust_name) REFERENCES customer(cust_name),
    FOREIGN KEY (acc_no) REFERENCES Account(Acc_no)
);

CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    amount DECIMAL(10, 2),
    FOREIGN KEY (branch_name) REFERENCES branch(branch_name)
);

CREATE TABLE Borrower (
    cust_name VARCHAR(50),
    loan_no INT,
    PRIMARY KEY (cust_name, loan_no),
    FOREIGN KEY (cust_name) REFERENCES customer(cust_name),
    FOREIGN KEY (loan_no) REFERENCES Loan(loan_no)
);

-- i. Find the average account balance at each branch
SELECT branch_name, AVG(balance) AS avg_balance
FROM Account
GROUP BY branch_name;

-- ii. Find no. of depositors at each branch.
SELECT a.branch_name, COUNT(d.cust_name) AS num_depositors
FROM Account a
LEFT JOIN Depositor d ON a.Acc_no = d.acc_no
GROUP BY a.branch_name;

-- iii. Find the branches where average account balance > 12000.
SELECT branch_name
FROM (
    SELECT branch_name, AVG(balance) AS avg_balance
    FROM Account
    GROUP BY branch_name
) AS avg_table
WHERE avg_balance > 12000;

-- iv. Find number of tuples in customer relation.
SELECT COUNT(*) AS num_tuples
FROM customer;

-- v. Calculate total loan amount given by the bank.
SELECT SUM(amount) AS total_loan_amount
FROM Loan;

-- vi. Delete all loans with loan amount between 1300 and 1500.
DELETE FROM Loan
WHERE amount BETWEEN 1300 AND 1500;

-- vii. Delete all tuples at every branch located in Nigdi.
DELETE FROM branch
WHERE branch_city = 'Nigdi';

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Q5: SQL Queries
-- i. Find all customers who have both account and loan at the bank.
SELECT c.*
FROM customer c
JOIN Depositor d ON c.cust_name = d.cust_name
JOIN Account a ON d.acc_no = a.Acc_no
JOIN Borrower b ON c.cust_name = b.cust_name
JOIN Loan l ON b.loan_no = l.loan_no;

-- ii. Find all customers who have an account but no loan at the bank.
SELECT c.*
FROM customer c
JOIN Depositor d ON c.cust_name = d.cust_name
JOIN Account a ON d.acc_no = a.Acc_no
LEFT JOIN Borrower b ON c.cust_name = b.cust_name
WHERE b.cust_name IS NULL;

-- iii. Find average account balance at Akurdi branch.
SELECT AVG(balance) AS avg_balance
FROM Account
WHERE branch_name = 'Akurdi';

-- iv. Find no. of depositors at each branch.
SELECT a.branch_name, COUNT(d.cust_name) AS num_depositors
FROM Account a
LEFT JOIN Depositor d ON a.Acc_no = d.acc_no
GROUP BY a.branch_name;

-- v. Find the branches where average account balance > 12000.
SELECT branch_name
FROM (
    SELECT branch_name, AVG(balance) AS avg_balance
    FROM Account
    GROUP BY branch_name
) AS avg_table
WHERE avg_balance > 12000;

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q6: PL/SQL Block
-- Assuming that Roll_no is the primary key in Borrower table
-- and that DateofIssue is of DATE data type

DECLARE
    v_roll_no Borrower.Roll_no%TYPE;
    v_name_of_book Borrower.NameofBook%TYPE;
    v_date_of_issue Borrower.DateofIssue%TYPE;
    v_status Borrower.Status%TYPE;
    v_fine_amt NUMBER(10, 2);

BEGIN
    -- Accept roll_no & name of book from the user
    v_roll_no := &input_roll_no;  -- This is a substitution variable for user input
    v_name_of_book := '&input_name_of_book';  -- This is a substitution variable for user input

    -- Assume current date is the date of submission
    v_date_of_issue := SYSDATE;

    -- Assume that the book is returned, so status changes from 'I' to 'R'
    v_status := 'R';

    -- Calculate the fine amount based on the number of days overdue
    SELECT 
        CASE
            WHEN (v_date_of_issue - DateofIssue) BETWEEN 15 AND 30 THEN 5 * (v_date_of_issue - DateofIssue)
            WHEN (v_date_of_issue - DateofIssue) > 30 THEN 50 * (v_date_of_issue - DateofIssue)
            ELSE 0
        END
    INTO v_fine_amt
    FROM Borrower
    WHERE Roll_no = v_roll_no;

    -- Insert into Fine table if there is a fine
    IF v_fine_amt > 0 THEN
        INSERT INTO Fine (Roll_no, Date, Amt)
        VALUES (v_roll_no, v_date_of_issue, v_fine_amt);
    END IF;

    -- Update Borrower table with the new status
    UPDATE Borrower
    SET Status = v_status
    WHERE Roll_no = v_roll_no;

    DBMS_OUTPUT.PUT_LINE('Fine amount: Rs ' || v_fine_amt);
END;
/


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Q7: PL/SQL Block with Parameterized Cursor
DECLARE
    CURSOR merge_cursor IS
        SELECT Rollno, Name
        FROM N_RollCall;

    v_rollno N_RollCall.Rollno%TYPE;
    v_name N_RollCall.Name%TYPE;

BEGIN
    FOR rec IN merge_cursor LOOP
        v_rollno := rec.Rollno;
        v_name := rec.Name;

        -- Check if the data already exists in O_RollCall
        IF NOT EXISTS (SELECT 1 FROM O_RollCall WHERE Rollno = v_rollno AND Name = v_name) THEN
            -- Insert the data into O_RollCall
            INSERT INTO O_RollCall (Rollno, Name) VALUES (v_rollno, v_name);
        END IF;
    END LOOP;
END;
/

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q8: Stored Procedure proc_Grade
CREATE OR REPLACE PROCEDURE proc_Grade (
    p_rollno IN marks.rollno%TYPE,
    p_name IN marks.name%TYPE,
    p_sub1 IN marks.sub1%TYPE,
    p_sub2 IN marks.sub2%TYPE,
    p_sub3 IN marks.sub3%TYPE,
    p_sub4 IN marks.sub4%TYPE,
    p_sub5 IN marks.sub5%TYPE
) IS
    v_total_marks NUMBER(10);
    v_grade VARCHAR2(30);
BEGIN
    -- Calculate total marks
    v_total_marks := p_sub1 + p_sub2 + p_sub3 + p_sub4 + p_sub5;

    -- Assign grade based on total marks
    IF v_total_marks >= 990 AND v_total_marks <= 1500 THEN
        v_grade := 'Distinction';
    ELSIF v_total_marks >= 900 AND v_total_marks <= 989 THEN
        v_grade := 'First Class';
    ELSIF v_total_marks >= 825 AND v_total_marks <= 899 THEN
        v_grade := 'Higher Second Class';
    ELSIF v_total_marks >= 600 AND v_total_marks <= 824 THEN
        v_grade := 'Pass Class';
    ELSE
        v_grade := 'Fail';
    END IF;

    -- Insert into stud_marks table
    INSERT INTO stud_marks (rollno, name, total_marks) VALUES (p_rollno, p_name, v_total_marks);

    -- Insert into Result table
    INSERT INTO Result (rollno, name, class) VALUES (p_rollno, p_name, v_grade);
    
    DBMS_OUTPUT.PUT_LINE('Grade for ' || p_name || ' (Rollno: ' || p_rollno || ') is ' || v_grade);
END proc_Grade;
/
To execute this procedure, you can call it with appropriate values like this:

sql

BEGIN
    proc_Grade(123, 'John Doe', 95, 88, 75, 92, 80);
END;
/

-- Replace the values with the actual student marks.

Q9: Database Trigger on Library Table
CREATE OR REPLACE TRIGGER library_audit_trigger
AFTER DELETE OR UPDATE
ON Library
FOR EACH ROW
DECLARE
    v_old_values Lib_Audit%ROWTYPE;
BEGIN
    IF DELETING THEN
        -- Capture old values for deleted records
        INSERT INTO Lib_Audit VALUES (:OLD.bookid, :OLD.bookname, :OLD.issuedate, :OLD.returndate, :OLD.cardnumber);
    ELSIF UPDATING THEN
        -- Capture old values for updated records
        v_old_values := Lib_Audit(:OLD.bookid, :OLD.bookname, :OLD.issuedate, :OLD.returndate, :OLD.cardnumber);
        INSERT INTO Lib_Audit VALUES v_old_values;
    END IF;
END;
/

Que 10.
// Creating Student_Data collection and inserting documents
db.createCollection("Student_Data")

db.Student_Data.insertMany([
  {
    RollNo: 1,
    Name: "John Doe",
    Class: "12A",
    dept: "Physics",
    college_name: "XYZ College",
    Marks_in_percentage: 85,
    mobile: "1234567890",
    email_id: "john.doe@example.com"
  },
  {
    RollNo: 2,
    Name: "Jane Smith",
    Class: "11B",
    dept: "Chemistry",
    college_name: "XYZ College",
    Marks_in_percentage: 92,
    mobile: "9876543210",
    email_id: "jane.smith@example.com"
  },
  // Add more documents as needed
]);

// Aggregation Operations using $group
db.Student_Data.aggregate([
  // i. Department wise Max Marks student
  {
    $group: {
      _id: "$dept",
      maxMarks: { $max: "$Marks_in_percentage" },
      maxStudent: { $first: "$$ROOT" }
    }
  },

  // ii. Department wise Min Marks student
  {
    $group: {
      _id: "$_id",
      minMarks: { $min: "$maxMarks" },
      minStudent: { $first: "$maxStudent" }
    }
  },

  // iii. Department wise Sum of Marks
  {
    $group: {
      _id: "$_id",
      sumMarks: { $sum: "$minMarks" }
    }
  },

  // iv. Department wise AVG Marks of student
  {
    $group: {
      _id: "$_id",
      avgMarks: { $avg: "$sumMarks" }
    }
  }
]);

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Que 11
// i. Create/insert 10 docs
db.Student_Data.insertMany([
  { RollNo: 1, Name: "John Doe", Class: "12A", dept: "Physics", college_name: "XYZ College", Marks_in_percentage: 85, mobile: "1234567890", email_id: "john.doe@example.com", sport_status: "Y" },
  { RollNo: 2, Name: "Jane Smith", Class: "11B", dept: "Chemistry", college_name: "XYZ College", Marks_in_percentage: 92, mobile: "9876543210", email_id: "jane.smith@example.com", sport_status: "N" },
  // Add more documents as needed
]);

// ii. Update the mobile no of a particular student
db.Student_Data.updateOne({ RollNo: 1 }, { $set: { mobile: "9999999999" } });

// iii. Update the class of TE students to BE
db.Student_Data.updateMany({ Class: "TE" }, { $set: { Class: "BE" } });

// iv. Delete the students whose percentage is less than 40
db.Student_Data.deleteMany({ Marks_in_percentage: { $lt: 40 } });

// v. Display department-wise first three toppers
db.Student_Data.aggregate([
  { $sort: { Marks_in_percentage: -1 } },
  { $group: { _id: "$dept", toppers: { $push: "$$ROOT" } } },
  { $project: { _id: 1, toppers: { $slice: ["$toppers", 3] } } }
]);

// vi. Display the student’s name those are in First class and participated in sports activity
db.Student_Data.find({ Class: "First", sport_status: "Y" }, { Name: 1, _id: 0 });

// vii. Display the student’s name those are in First class OR participated in sports activity
db.Student_Data.find({ $or: [{ Class: "First" }, { sport_status: "Y" }] }, { Name: 1, _id: 0 });


Q.12 Implement Map-Reduce Operation consider your own collection.
// Insert sample data into the Sales collection
db.Sales.insertMany([
  { product: "A", amount: 100, quantity: 2, date: ISODate("2023-01-01") },
  { product: "B", amount: 150, quantity: 1, date: ISODate("2023-01-01") },
  { product: "A", amount: 200, quantity: 3, date: ISODate("2023-01-02") },
  { product: "B", amount: 120, quantity: 2, date: ISODate("2023-01-02") },
  // Add more sample data as needed
]);

// Map function
var mapFunction = function() {
  emit(this.product, { amount: this.amount, quantity: this.quantity });
};

// Reduce function
var reduceFunction = function(key, values) {
  var result = { total_amount: 0, total_quantity: 0 };
  values.forEach(function(value) {
    result.total_amount += value.amount;
    result.total_quantity += value.quantity;
  });
  return result;
};

// Execute Map-Reduce operation
var result = db.Sales.mapReduce(
  mapFunction,
  reduceFunction,
  { out: "SalesSummary" }
);

// Display the result collection
db[result.result].find();

Q13: MongoDB Operations on Employee Collection
// i. Insert at least 10 documents
db.Employee.insertMany([
  { emp_id: 1, emp_name: "John Doe", emp_salary: 60000, emp_designation: "Junior Developer", emp_Bdate: ISODate("1990-01-01"), emp_mobileno: "1234567890", emp_dept: "IT" },
  // Add more documents as needed
]);

// ii. Display total salary department-wise
db.Employee.aggregate([
  { $group: { _id: "$emp_dept", total_salary: { $sum: "$emp_salary" } } }
]);

// iii. Update the emp designation from "Junior Developer" to "Senior Developer"
db.Employee.updateMany({ emp_designation: "Junior Developer" }, { $set: { emp_designation: "Senior Developer" } });

// iv. Delete the emp with age greater than 60 (assuming age is calculated from emp_Bdate)
db.Employee.deleteMany({ emp_Bdate: { $lt: ISODate("1963-01-01") } });

// v. Display the emp names and salary department-wise
db.Employee.aggregate([
  { $group: { _id: "$emp_dept", employees: { $push: { emp_name: "$emp_name", emp_salary: "$emp_salary" } } } }
]);



Q14: JDBC Program for Database Navigation Operations
import java.sql.*;

public class EmployeeDatabaseOperations {

    public static void main(String[] args) {
        String jdbcUrl = "jdbc:mysql://localhost:3306/your_database_name";
        String username = "your_username";
        String password = "your_password";

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
            // i. Insert at least 10 documents
            insertEmployee(connection, 1, "John Doe", 60000, "Junior Developer", "1990-01-01", "1234567890", "IT");
            // Add more insertEmployee calls as needed

            // ii. Display total salary department-wise
            displayTotalSalaryByDepartment(connection);

            // iii. Update the emp designation from "Junior Developer" to "Senior Developer"
            updateEmployeeDesignation(connection, "Junior Developer", "Senior Developer");

            // iv. Delete the emp with age greater than 60
            deleteEmployeeWithAgeGreaterThan60(connection, "1963-01-01");

            // v. Display the emp names and salary department-wise
            displayEmployeeNamesAndSalaryByDepartment(connection);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void insertEmployee(Connection connection, int empId, String empName, int empSalary,
                                       String empDesignation, String empBdate, String empMobileNo, String empDept)
            throws SQLException {
        String sql = "INSERT INTO Employee (emp_id, emp_name, emp_salary, emp_designation, emp_Bdate, emp_mobileno, emp_dept) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setInt(1, empId);
            preparedStatement.setString(2, empName);
            preparedStatement.setInt(3, empSalary);
            preparedStatement.setString(4, empDesignation);
            preparedStatement.setDate(5, Date.valueOf(empBdate));
            preparedStatement.setString(6, empMobileNo);
            preparedStatement.setString(7, empDept);
            preparedStatement.executeUpdate();
        }
    }

    private static void displayTotalSalaryByDepartment(Connection connection) throws SQLException {
        String sql = "SELECT emp_dept, SUM(emp_salary) AS total_salary FROM Employee GROUP BY emp_dept";
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(sql)) {
            while (resultSet.next()) {
                String department = resultSet.getString("emp_dept");
                int totalSalary = resultSet.getInt("total_salary");
                System.out.println("Department: " + department + ", Total Salary: " + totalSalary);
            }
        }
    }

    private static void updateEmployeeDesignation(Connection connection, String oldDesignation, String newDesignation)
            throws SQLException {
        String sql = "UPDATE Employee SET emp_designation = ? WHERE emp_designation = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, newDesignation);
            preparedStatement.setString(2, oldDesignation);
            preparedStatement.executeUpdate();
        }
    }

    private static void deleteEmployeeWithAgeGreaterThan60(Connection connection, String birthdate)
            throws SQLException {
        String sql = "DELETE FROM Employee WHERE emp_Bdate < ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setDate(1, Date.valueOf(birthdate));
            preparedStatement.executeUpdate();
        }
    }

    private static void displayEmployeeNamesAndSalaryByDepartment(Connection connection) throws SQLException {
        String sql = "SELECT emp_dept, emp_name, emp_salary FROM Employee";
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(sql)) {
            while (resultSet.next()) {
                String department = resultSet.getString("emp_dept");
                String empName = resultSet.getString("emp_name");
                int empSalary = resultSet.getInt("emp_salary");
                System.out.println("Department: " + department + ", Employee Name: " + empName +
                        ", Salary: " + empSalary);
            }
        }
    }
}
